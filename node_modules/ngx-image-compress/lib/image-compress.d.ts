import { Renderer2 } from '@angular/core';
import { DataUrl } from './models/data-url';
import { DOC_ORIENTATION } from './models/DOC_ORIENTATION';
import { UploadResponse } from './models/upload-response';
export declare class ImageCompress {
    getOrientation(file: File): Promise<DOC_ORIENTATION>;
    uploadFile(render: Renderer2, multiple?: boolean, rejectOnCancel?: boolean): Promise<UploadResponse | UploadResponse[]>;
    fileToDataURL(file: File): Promise<{
        dataUrl: string;
        fileName: string;
    }>;
    generateUploadInputRenderer(render: Renderer2, multiple?: boolean, rejectOnCancel?: boolean): Promise<FileList | null>;
    generateUploadInputNative(documentNativeApi: any, multiple?: boolean, rejectOnCancel?: boolean): Promise<FileList | null>;
    compress(imageDataUrlSource: DataUrl, orientation: DOC_ORIENTATION, render: Renderer2, ratio?: number, quality?: number, maxwidth?: number, maxheight?: number): Promise<string>;
    byteCount: (imgString: DataUrl) => number;
    uploadGetImageMaxSize(maxSizeMb: number, debugMode: boolean, render: Renderer2, rejectOnCancel?: boolean): Promise<UploadResponse>;
    getImageMaxSize(myFile: UploadResponse, maxSizeMb: number, debugMode: boolean, render: Renderer2): Promise<UploadResponse>;
}
